import { Observable } from "rxjs/Observable";
import { Subscription } from "rxjs/Subscription";
import "rxjs/add/observable/interval";
import "rxjs/add/observable/timer";
import "rxjs/add/observable/never";
import "rxjs/add/operator/map";
import "rxjs/add/operator/finally";
import "rxjs/add/operator/takeUntil";
export declare class RxCountDown {
    protected durationMs: number;
    protected endDate: string;
    protected intervalMs: number;
    protected format: string;
    protected remainingTime: string;
    protected timerObservable: Observable<number>;
    protected onCompleteFn: () => void;
    protected expired: boolean;
    constructor(durationMs?: number, endDate?: string, intervalMs?: number, format?: string);
    protected generateTimerObservable(): Observable<number>;
    protected tick(): void;
    protected complete(): void;
    protected computeRemainingTimeString(remainingTimeMs: number): string;
    protected computeRemainingTimeMs(targetDate: string, durationMs: number): number;
    protected setExpired(): void;
    onComplete(onCompleteFn: () => void): void;
    getRemainingTime(): string;
    isExpired(): boolean;
    subscribe(next?: (value: string) => void, error?: (error: any) => void, complete?: () => void): Subscription;
}
export default RxCountDown;
